<?xml version="1.0" encoding="UTF-8"?>
<!--
  元模式定义：定义什么是模式
  这是一个自举的定义 - 用模式的形式定义模式本身
-->
<pattern name="pattern">

  <essence>
    <purpose>
      定义DPML认知框架模式的标准结构，确保所有模式定义具有一致的格式和完备性。
      模式是可复制的原型（Replicable Archetype），它定义了结构约束和语义边界，
      但不限制具体内容的创造。
    </purpose>

    <metaphor>
      青铜铸造的"模范"：模（内模）定义形状结构，范（外模）定义边界约束，
      两者结合形成完整的铸造系统，可以生产无数个形状一致的器物。
    </metaphor>
  </essence>

  <structure>
    <required>
      <element name="essence">
        模式的本质和核心价值，包含purpose（目的）和可选的metaphor（隐喻）
      </element>

      <element name="structure">
        模式的结构定义，说明包含哪些必需元素和可选元素
      </element>

      <element name="semantics">
        各元素的语义约定，框定每个元素应该包含什么性质的内容
      </element>
    </required>

    <optional>
      <element name="usage">
        使用指南，包含适用场景、示例和反模式
      </element>

      <element name="validation">
        验证规则和质量标准
      </element>
    </optional>

    <composition>
      模式定义应按照 essence → structure → semantics → usage → validation 的顺序组织，
      体现从本质到形式、从抽象到具体的递进关系
    </composition>
  </structure>

  <semantics>
    <essence>
      回答"为什么需要这个模式"和"这个模式的核心价值是什么"。
      应该是声明式的，说明模式解决什么问题、服务什么场景。
      metaphor是可选的，但好的隐喻能帮助理解模式的本质。
    </essence>

    <structure>
      回答"这个模式由哪些部分组成"。
      必须明确区分required（必需）和optional（可选）元素。
      composition说明元素之间的关系、顺序或组合规则。
    </structure>

    <semantics>
      回答"每个元素意味着什么"。
      为每个元素定义语义边界 - 框定应该包含什么性质的内容，但不限制具体内容本身。
      体现"约而不束"原则：约束语义性质，不束缚内容创造。
    </semantics>

    <usage>
      回答"何时用、如何用、怎样用好"。
      scenarios描述适用场景，examples提供具体示例，
      anti-patterns指出常见误用，帮助使用者避免错误。
    </usage>

    <validation>
      回答"如何判断使用是否正确"。
      可以包含结构验证规则（必需元素是否齐全）和
      质量标准（内容是否符合语义约定）。
    </validation>
  </semantics>

  <usage>
    <scenarios>
      <scenario>设计新的认知框架模式时作为模板</scenario>
      <scenario>审查现有模式定义是否完备和规范</scenario>
      <scenario>为自动化工具提供验证标准</scenario>
      <scenario>为社区贡献者提供统一的模式定义规范</scenario>
    </scenarios>

    <examples>
      <!-- 见附录：使用元模式定义thought模式 -->
    </examples>

    <anti-patterns>
      <anti-pattern>
        <mistake>在structure中包含具体内容示例</mistake>
        <why>structure应该只定义"有哪些元素"，不应该包含"元素里写什么"</why>
        <correct>具体内容示例应该放在usage/examples中</correct>
      </anti-pattern>

      <anti-pattern>
        <mistake>semantics定义过于宽泛，如"可以是任何内容"</mistake>
        <why>这失去了"框定语义边界"的作用</why>
        <correct>应该明确说明"什么性质的内容"，如"客观描述"、"推理过程"等</correct>
      </anti-pattern>

      <anti-pattern>
        <mistake>required元素过多，导致使用负担重</mistake>
        <why>违反"最小化"原则</why>
        <correct>只将真正必不可少的元素标记为required</correct>
      </anti-pattern>
    </anti-patterns>
  </usage>

  <validation>
    <rules>
      <rule>模式定义必须包含essence、structure、semantics三个必需元素</rule>
      <rule>structure必须明确区分required和optional</rule>
      <rule>semantics必须为每个required元素提供语义定义</rule>
      <rule>所有元素名称必须遵循kebab-case命名规范</rule>
    </rules>

    <quality-criteria>
      <criterion>purpose是否清晰说明了模式的价值和适用场景</criterion>
      <criterion>required元素是否精简（≤5个为佳）</criterion>
      <criterion>semantics是否框定了清晰的语义边界</criterion>
      <criterion>是否提供了足够的使用示例</criterion>
      <criterion>是否指出了常见的误用模式</criterion>
    </quality-criteria>
  </validation>

</pattern>
