<prompt id="processing-example" version="1.0" mode="strict">
  <!-- 这是一个用于演示处理功能的DPML示例 -->
  
  <metadata>
    <title>处理示例</title>
    <author>DPML示例作者</author>
    <created>2023-04-10</created>
  </metadata>
  
  <role name="assistant" expertise="programming">
    我是一个专注于编程领域的AI助手，能够回答各种编程相关问题并提供代码示例。
    我擅长的编程语言包括TypeScript、Python和Rust。
  </role>
  
  <context>
    用户正在学习TypeScript并需要帮助理解类型系统。
    当前用户水平：初级程序员，熟悉JavaScript基础。
  </context>
  
  <thinking>
    我需要提供关于TypeScript类型系统的简明解释，并给出实用的代码示例。
    应该涵盖基本类型、接口、泛型等概念，但保持简洁明了。
    
    <code language="typescript">
      // TypeScript类型系统示例
      
      // 基本类型
      let isDone: boolean = false;
      let count: number = 10;
      let name: string = "TypeScript";
      
      // 数组
      let list: number[] = [1, 2, 3];
      let names: Array<string> = ["Alice", "Bob"];
      
      // 元组
      let tuple: [string, number] = ["hello", 10];
      
      // 枚举
      enum Color {Red, Green, Blue}
      let color: Color = Color.Green;
      
      // 接口
      interface User {
        id: number;
        name: string;
        email?: string; // 可选属性
        readonly createdAt: Date; // 只读属性
      }
      
      // 实现接口
      const newUser: User = {
        id: 1,
        name: "张三",
        createdAt: new Date()
      };
      
      // 泛型
      function identity<T>(arg: T): T {
        return arg;
      }
      
      // 泛型接口
      interface Response<T> {
        data: T;
        status: number;
        message: string;
      }
      
      // 类型断言
      const someValue: any = "this is a string";
      const strLength: number = (someValue as string).length;
    </code>
  </thinking>
  
  <executing>
    根据用户的编程水平和需求，我可以这样解释TypeScript的类型系统：
    
    <step id="introduction">
      首先介绍TypeScript的核心优势：为JavaScript添加类型检查。
    </step>
    
    <step id="basic-types">
      解释基本类型：boolean、number、string等，以及它们的用法。
    </step>
    
    <step id="advanced-types">
      介绍更高级的类型概念：接口、泛型、联合类型等。
    </step>
    
    <step id="example">
      提供一个综合性的代码示例，展示类型系统的实际应用。
    </step>
  </executing>
  
  <references>
    <reference id="ts-docs" url="https://www.typescriptlang.org/docs/" />
    <reference id="ts-handbook" url="https://www.typescriptlang.org/docs/handbook/intro.html" />
  </references>
</prompt> 